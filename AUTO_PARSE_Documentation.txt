
### AUTO_PARSE KÃ¼tÃ¼phanesi DokÃ¼mantasyonu

---

#### GiriÅŸ

`AUTO_PARSE` kÃ¼tÃ¼phanesi, Arduino projelerinde ayraÃ§ karakterleriyle bÃ¶lÃ¼nmÃ¼ÅŸ verilerin ayrÄ±ÅŸtÄ±rÄ±lmasÄ±nÄ± kolaylaÅŸtÄ±rÄ±r. AyrÄ±ÅŸtÄ±rÄ±lan verileri tanÄ±mlÄ± anahtarlarla iliÅŸkilendirir ve bu verilere dinamik olarak eriÅŸim saÄŸlar. KÃ¼tÃ¼phane, esneklik ve kullanÄ±m kolaylÄ±ÄŸÄ± saÄŸlamak amacÄ±yla tasarlanmÄ±ÅŸtÄ±r ve aÅŸaÄŸÄ±daki Ã¶zellikleri sunar:

---

### Ã–zellikler

1. AyrÄ±lmÄ±ÅŸ (delimited) string verileri anahtar-deÄŸer Ã§iftleri olarak ayrÄ±ÅŸtÄ±rÄ±r.
2. Ã‡alÄ±ÅŸma zamanÄ±nda dinamik olarak Ã¶zel anahtarlar (`KEY`) tanÄ±mlanabilir.
3. AyrÄ±ÅŸtÄ±rÄ±lan verilere anahtar isimleriyle eriÅŸim saÄŸlar.
4. Ã–zel ayraÃ§ karakterlerini destekler.
5. Verilerin bÃ¼tÃ¼nlÃ¼ÄŸÃ¼nÃ¼ saÄŸlamak iÃ§in isteÄŸe baÄŸlÄ± uzunluk doÄŸrulama desteÄŸi sunar.
6. **DEBUG** modu ile adÄ±m adÄ±m iÅŸlem takibi saÄŸlar.
7. `info()` metodu ile tÃ¼m sistem bilgilerini ve ayarlarÄ±nÄ± gÃ¶rÃ¼ntÃ¼ler.

---

### SÄ±nÄ±f TanÄ±mÄ±

#### `AUTO_PARSE`

`AUTO_PARSE` sÄ±nÄ±fÄ±, kÃ¼tÃ¼phanenin ana yapÄ±sÄ±nÄ± oluÅŸturur ve aÅŸaÄŸÄ±daki iÅŸlevleri saÄŸlar:

---

### Kurucu (Constructor)

```cpp
AUTO_PARSE(int count);
```

- **AÃ§Ä±klama**: TanÄ±mlÄ± anahtar sayÄ±sÄ± kadar bir `AUTO_PARSE` nesnesi oluÅŸturur.
- **Parametreler**: 
  - `count`: TanÄ±mlanacak anahtarlarÄ±n sayÄ±sÄ±.
- **Ã–rnek**:
  ```cpp
  AUTO_PARSE parser(4);
  ```

---

### Fonksiyonlar

#### 1. `setKeyName(String baseName[])`

- **AÃ§Ä±klama**: KullanÄ±cÄ± tarafÄ±ndan saÄŸlanan anahtar isimlerini tanÄ±mlar.
- **Parametreler**:
  - `baseName[]`: Anahtar isimlerini iÃ§eren bir string dizisi.
- **Ã–rnek**:
  ```cpp
  String keys[] = {"name", "surname", "id", "city"};
  parser.setKeyName(keys);
  ```

---

#### 2. `setParseChars(char chars)`

- **AÃ§Ä±klama**: AyrÄ±ÅŸtÄ±rma sÄ±rasÄ±nda kullanÄ±lacak ayraÃ§ karakterini tanÄ±mlar.
- **Parametreler**:
  - `chars`: String veriyi ayÄ±racak karakter.
- **Ã–rnek**:
  ```cpp
  parser.setParseChars('-');
  ```

---

#### 3. `parseString(String data)`

- **AÃ§Ä±klama**: Verilen stringi ayraÃ§ karakterine gÃ¶re ayrÄ±ÅŸtÄ±rÄ±r ve anahtar-deÄŸer Ã§iftlerini oluÅŸturur.
- **Parametreler**:
  - `data`: AyrÄ±ÅŸtÄ±rÄ±lacak string veri.
- **Ã–rnek**:
  ```cpp
  parser.parseString("John-Doe-123-NewYork");
  ```

---

#### 4. `setLengthString(int length)`

- **AÃ§Ä±klama**: Uzunluk doÄŸrulama iÃ§in beklenen string uzunluÄŸunu tanÄ±mlar.
- **Parametreler**:
  - `length`: Beklenen string uzunluÄŸu.
- **Ã–rnek**:
  ```cpp
  parser.setLengthString(20);
  ```

---

#### 5. `enableLengthCheck()`

- **AÃ§Ä±klama**: String uzunluÄŸu kontrolÃ¼nÃ¼ etkinleÅŸtirir.
- **Ã–rnek**:
  ```cpp
  parser.enableLengthCheck();
  ```

---

#### 6. `disableLengthCheck()`

- **AÃ§Ä±klama**: String uzunluÄŸu kontrolÃ¼nÃ¼ devre dÄ±ÅŸÄ± bÄ±rakÄ±r.
- **Ã–rnek**:
  ```cpp
  parser.disableLengthCheck();
  ```

---

#### 7. `enableDEBUG()`

- **AÃ§Ä±klama**: DEBUG modunu etkinleÅŸtirir. Ä°ÅŸlem adÄ±mlarÄ± seri monitÃ¶re yazdÄ±rÄ±lÄ±r.
- **Ã–rnek**:
  ```cpp
  parser.enableDEBUG();
  ```

---

#### 8. `disableDEBUG()`

- **AÃ§Ä±klama**: DEBUG modunu devre dÄ±ÅŸÄ± bÄ±rakÄ±r.
- **Ã–rnek**:
  ```cpp
  parser.disableDEBUG();
  ```

---

#### 9. `debug(String message)`

- **AÃ§Ä±klama**: DEBUG modunda bir mesaj yazdÄ±rÄ±r. (Genelde dahili olarak kullanÄ±lÄ±r.)
- **Parametreler**:
  - `message`: YazdÄ±rÄ±lacak mesaj.
- **Ã–rnek**:
  ```cpp
  parser.debug("Test message");
  ```

---

#### 10. `getValue(String key)`

- **AÃ§Ä±klama**: Belirtilen anahtarÄ±n karÅŸÄ±lÄ±k gelen deÄŸerini dÃ¶ndÃ¼rÃ¼r.
- **Parametreler**:
  - `key`: DeÄŸerini almak istediÄŸiniz anahtar.
- **DÃ¶ndÃ¼rÃ¼r**: AnahtarÄ±n deÄŸeri veya `NULL`.
- **Ã–rnek**:
  ```cpp
  String name = parser.getValue("name");
  ```

---

#### 11. `info()`

- **AÃ§Ä±klama**: TÃ¼m ayarlarÄ± ve verileri seri monitÃ¶re yazdÄ±rÄ±r.
- **Ã–rnek**:
  ```cpp
  parser.info();
  ```

---

### Ã–rnek KullanÄ±m

```cpp
#include <Arduino.h>
#include "AUTO_PARSE.h"

void setup() {
  Serial.begin(9600);

  // 4 anahtar iÃ§in bir AUTO_PARSE nesnesi oluÅŸtur
  AUTO_PARSE parser(4);

  // Anahtar isimlerini ayarla
  String keys[] = {"name", "surname", "id", "city"};
  parser.setKeyName(keys);

  // Parse karakterini ayarla
  parser.setParseChars('-');

  // String uzunluÄŸu kontrolÃ¼
  parser.setLengthString(20);
  parser.enableLengthCheck();

  // DEBUG modunu etkinleÅŸtir
  parser.enableDEBUG();

  // String verisini ayrÄ±ÅŸtÄ±r
  parser.parseString("John-Doe-123-NewYork");

  // DeÄŸerleri al ve yazdÄ±r
  Serial.println("Name: " + parser.getValue("name"));

  // TÃ¼m bilgileri yazdÄ±r
  parser.info();
}

void loop() {
  // DÃ¶ngÃ¼ye gerek yok
}
```

---

### Ã–rnek Seri MonitÃ¶r Ã‡Ä±ktÄ±sÄ±

```
[DEBUG] AUTO_PARSE initialized with 4 keys.
[DEBUG] Key 0 set to: name
[DEBUG] Key 1 set to: surname
[DEBUG] Key 2 set to: id
[DEBUG] Key 3 set to: city
[DEBUG] Parse character set to: -
[DEBUG] String length set to: 20
[DEBUG] Length check enabled.
[DEBUG] DEBUG mode enabled.
[DEBUG] Parsing string: John-Doe-123-NewYork
[DEBUG] Length check passed. Length: 20
[DEBUG] Extracted part: John
[DEBUG] Key: name, Value: John
[DEBUG] Extracted part: Doe
[DEBUG] Key: surname, Value: Doe
[DEBUG] Extracted part: 123
[DEBUG] Key: id, Value: 123
[DEBUG] Extracted part: NewYork
[DEBUG] Key: city, Value: NewYork
[DEBUG] Parsing completed.
Name: John
=== AUTO_PARSE Info ===
Key Count: 4
Key 0: name
Key 1: surname
Key 2: id
Key 3: city
Parse Character: -
String Length: 20
Length Check Enabled: Yes
DEBUG Mode: Enabled
Parsed Data:
  Key: name, Value: John
  Key: surname, Value: Doe
  Key: id, Value: 123
  Key: city, Value: NewYork
========================
```

---

### Notlar

1. KullanÄ±lacak anahtar (`KEY`) sayÄ±sÄ±, `AUTO_PARSE` nesnesi oluÅŸturulurken belirlenir.
2. AyrÄ±ÅŸtÄ±rma iÅŸlemi Ã¶ncesinde anahtar isimleri (`setKeyName`) ve ayraÃ§ karakteri (`setParseChars`) ayarlanmalÄ±dÄ±r.
3. Uzunluk doÄŸrulama aktifken, string uzunluÄŸu belirtilen `STRING_LENGTH` deÄŸerine eÅŸit deÄŸilse iÅŸlem yapÄ±lmaz.

Bu dokÃ¼mantasyon, kÃ¼tÃ¼phanenin tÃ¼m iÅŸlevlerini ve kullanÄ±m detaylarÄ±nÄ± kapsamaktadÄ±r. ğŸ˜Š
